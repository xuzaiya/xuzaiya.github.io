<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title><![CDATA[hexo博客添加在线留言系统]]></title>
    <url>%2F2019%2F09%2F24%2Fhexo%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0%E5%9C%A8%E7%BA%BF%E7%95%99%E8%A8%80%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[前言由于看见别人的博客里面都有在线留言，在线聊天功能，感觉挺有趣的，因此我也想给我的博客配置这个功能，感觉还十分的有趣，哈哈，废话不多说，开搞。 步骤详解（1）在DaoCloud网站https://dashboard.daocloud.io/ 注册账号，并登录 （2）点击左边栏的 应用设置——&gt;安装到网站 ，可以查看自己的app_id (3)修改/themes/next/layout/_partials/head.swig文件，添加内容如下： 123456789&#123;% if theme.daovoice %&#125; &lt;script&gt; (function(i,s,o,g,r,a,m)&#123;i[&quot;DaoVoiceObject&quot;]=r;i[r]=i[r]||function()&#123;(i[r].q=i[r].q||[]).push(arguments)&#125;,i[r].l=1*new Date();a=s.createElement(o),m=s.getElementsByTagName(o)[0];a.async=1;a.src=g;a.charset=&quot;utf-8&quot;;m.parentNode.insertBefore(a,m)&#125;)(window,document,&quot;script&quot;,(&apos;https:&apos; == document.location.protocol ? &apos;https:&apos; : &apos;http:&apos;) + &quot;//widget.daovoice.io/widget/0f81ff2f.js&quot;,&quot;daovoice&quot;) daovoice(&apos;init&apos;, &#123; app_id: &quot;&#123;&#123;theme.daovoice_app_id&#125;&#125;&quot; &#125;); daovoice(&apos;update&apos;); &lt;/script&gt;&#123;% endif %&#125; (4)修改主题的配置文件，添加以下代码： 1234# Online contactdaovoice: truedaovoice_app_id: 0d207805 (5) 到这就已经完成了，hexo s 运行自己的博客，效果如下： 结束语有问题欢迎留言哦，记得双击，么么哒！]]></content>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA['mybatis框架一']]></title>
    <url>%2F2019%2F09%2F23%2Fmybatis%E6%A1%86%E6%9E%B6%E4%B8%80%2F</url>
    <content type="text"><![CDATA[前言现在是2019年9月23号，晚上23:40，我目前是研二上学期，秋季上学期刚开学，我对自己职业规划是毕业后从事java后端开发，对于很多企业都要求后端开发者具备mybatis框架知识体系，为了毕业后能够找到一份令自己满意的工作，我开始学习了mybatis框架，以下是我学习mybatis框架的一些浅薄的认知，适合初学者阅读 MyBatis框架的介绍（1）MyBatis框架是什么？MyBatis 是一款优秀的持久层框架，它支持定制化 SQL、存储过程以及高级映射。MyBatis 避免了几乎所有的 JDBC 代码和手动设置参数以及获取结果集。 （2）MyBatis为什么会出现，并且他解决的什么问题？​ 数据库链接创建、释放频繁造成系统资源浪费从而影响系统性能，如果使用数据库链接池可解决此问题。 解决：在SqlMapConfig.xml中配置数据链接池，使用连接池管理数据库链接。 Sql语句写在代码中造成代码不易维护，实际应用sql变化的可能较大，sql变动需要改变java代码。解决：将Sql语句配置在XXXXmapper.xml文件中与java代码分离。 ​ 向sql语句传参数麻烦，因为sql语句的where条件不一定，可能多也可能少，占位符需要和参数一一对应。 解决：Mybatis自动将java对象映射至sql语句，通过statement中的parameterType定义输入参数的类型。 ​ 对结果集解析麻烦，sql变化导致解析代码变化，且解析前需要遍历，如果能将数据库记录封装成pojo对象解析比较方便。 解决：Mybatis自动将sql执行结果映射至java对象，通过statement中的resultType定义输出结果的类型。 （3）同类的技术有哪些？最原始的JDBC，Hibernate框架 MyBatis框架的入门案例技术点mybatis框架 + 开发工具IDEA 环境搭建（1）新建一个基于maven管理的java项目，在项目的配置文件（pom.xml文件）下导入所需的依赖(以下是我的配置，具体版本可以根据实际情况而定，自行选择)： 12345678910111213141516171819202122&lt;dependencies&gt; &lt;dependency&gt; &lt;groupId&gt;org.mybatis&lt;/groupId&gt; &lt;artifactId&gt;mybatis&lt;/artifactId&gt; &lt;version&gt;3.4.5&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;mysql&lt;/groupId&gt; &lt;artifactId&gt;mysql-connector-java&lt;/artifactId&gt; &lt;version&gt;5.1.6&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;log4j&lt;/groupId&gt; &lt;artifactId&gt;log4j&lt;/artifactId&gt; &lt;version&gt;1.2.12&lt;/version&gt; &lt;/dependency&gt; &lt;dependency&gt; &lt;groupId&gt;junit&lt;/groupId&gt; &lt;artifactId&gt;junit&lt;/artifactId&gt; &lt;version&gt;4.10&lt;/version&gt; &lt;/dependency&gt; &lt;/dependencies&gt; （2）在资源目录resources下新建一个SqlMapConfig.xml文件，导入约束，然后配置一些数据库相关的信息（具体数据库的配置信息根据自己的情况做相应修改即可）： 123456789101112131415161718192021222324252627282930313233​```xml&lt;!--约束--&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE configuration PUBLIC "-//mybatis.org//DTD Config 3.0//EN" "http://mybatis.org/dtd/mybatis-3-config.dtd"&gt;&lt;!--依赖--&gt;&lt;configuration&gt; &lt;!--配置环境--&gt; &lt;environments default="mysql"&gt; &lt;!--配置mysql 的环境--&gt; &lt;environment id="mysql"&gt; &lt;!--配置事务类型--&gt; &lt;transactionManager type="JDBC"&gt;&lt;/transactionManager&gt; &lt;!--配置数据源，也称连接池--&gt; &lt;dataSource type="POOLED"&gt; &lt;!--配置连接数据库的4个基本信息--&gt; &lt;property name="driver"value="com.mysql.jdbc.Driver" /&gt; &lt;property name="url" value="jdbc:mysql://localhost:3306/eesy"/&gt; &lt;property name="username" value="root"/&gt; &lt;property name="password" value="yx1994"/&gt; &lt;/dataSource&gt; &lt;/environment&gt; &lt;/environments&gt; &lt;!--指定映射配置文件的位置，映射配置文件指的是每个dao独立的配置文件--&gt; &lt;mappers&gt; &lt;!-- &lt;mapper resource="com/itheima/dao/IUserDao.xml"/&gt;--&gt; &lt;/mappers&gt;&lt;/configuration&gt; 入门案例（1）搭建好开发环境之后，我们可以新建我们的实体类和dao接口： 123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051525354555657585960616263646566676869707172//我的实体类：package com.itheima.domain;import java.io.Serializable;import java.util.Date;public class User implements Serializable &#123; private Integer id; private String username; private Date birthday; private String sex; private String address; public Integer getId() &#123; return id; &#125; public void setId(Integer id) &#123; this.id = id; &#125; public String getUsername() &#123; return username; &#125; public void setUsername(String username) &#123; this.username = username; &#125; public Date getBirthday() &#123; return birthday; &#125; public void setBirthday(Date birthday) &#123; this.birthday = birthday; &#125; public String getSex() &#123; return sex; &#125; public void setSex(String sex) &#123; this.sex = sex; &#125; public String getAddress() &#123; return address; &#125; public void setAddress(String address) &#123; this.address = address; &#125; @Override public String toString() &#123; return "User&#123;" + "id=" + id + ", username='" + username + '\'' + ", birthday=" + birthday + ", sex='" + sex + '\'' + ", address='" + address + '\'' + '&#125;'; &#125;&#125;// 我的dao接口 即用户的持久成接口public interface IUserDao &#123; /* 查询所有操作 ,此处先只演示一个查询所用用户的一个方法 */ List&lt;User&gt; findAll();&#125; （2）完成第一步之后，我们需要在resources目录下，新建一个与dao接口相同的路径的xml配置文件： 1234567891011121314151617&lt;!--我的新建文件 IUserDao.xml文件--&gt;&lt;!--第一步引入映射的约束--&gt;&lt;?xml version="1.0" encoding="UTF-8"?&gt;&lt;!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd"&gt;&lt;!--配置查询的sql--&gt;&lt;mapper namespace="com.itheima.dao.IUserDao"&gt; &lt;!-- id属性：就是dao接口的方法名称 resultType：就是执行sql对应实体的全类名在select标签里面写sql语句--&gt; &lt;select id="findAll" resultType="com.itheima.domain.User"&gt; select * from user &lt;/select&gt;&lt;/mapper&gt; （3）需要在SqlMapConfig.xml文件里面配置一下我们的映射文件 123&lt;mappers&gt; &lt;mapper resource="com/itheima/dao/IUserDao.xml"/&gt; &lt;/mappers&gt; (4)我们可以写一个测试类来测试一下，我们写的能否从数据库取到数据，并且封装到实体中： 1234567891011121314151617181920@Test public void testFindAll() throws Exception &#123; //1.读取配置文件 InputStream in = Resources.getResourceAsStream("SqlMapConfig.xml"); //2.创建SqlSessionFactory工厂 SqlSessionFactoryBuilder builder = new SqlSessionFactoryBuilder(); SqlSessionFactory factory = builder.build(in); //3.使用工厂生产SqlSession对象 SqlSession session = factory.openSession(); //4.使用SqlSession 创建Dao接口的代理对象 // 根据dao接口的字节码创建dao的代理对象 IUserDao userDao = session.getMapper(IUserDao.class); //5.使用代理对象执行方法 List&lt;User&gt; users = userDao.findAll(); for (User user:users)&#123; System.out.println(user); &#125; //6.释放资源 session.close(); in.close(); &#125; (5)执行结果： 以上我们已经完成了mybatis入门的第一个案例，这其中还有很多对数据库的增删改查操作，我们都可以用配置文件的方式，完成对数据的访问。]]></content>
      <tags>
        <tag>mybatis框架</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA['hexo博客配置背景音乐,绑定域名,添加评论系统']]></title>
    <url>%2F2019%2F09%2F20%2Fhexo%E5%8D%9A%E5%AE%A2%E9%85%8D%E7%BD%AE%E8%83%8C%E6%99%AF%E9%9F%B3%E4%B9%90%E5%92%8C%E7%BB%91%E5%AE%9A%E5%9F%9F%E5%90%8D%E5%92%8C%E6%B7%BB%E5%8A%A0%E8%AF%84%E8%AE%BA%E7%B3%BB%E7%BB%9F%2F</url>
    <content type="text"><![CDATA[给hexo博客next主题添加背景音乐1.生成外链播放器html代码 2.将赋值的代码拷贝到themes/next/layout/_macro/sidebar.swig 文件下 123456&lt;!--音乐播放器--&gt; &lt;div id="music163player"&gt; &#123;%if theme.background_music %&#125; &lt;iframe frameborder="no" border="0" marginwidth="0" marginheight="0" width=330 height=86 src="//music.163.com/outchain/player?type=2&amp;id=483937795&amp;auto=1&amp;height=66"&gt;&lt;/iframe&gt; &#123;% endif %&#125; &lt;/div&gt; 3.在主题的配置文件的末尾添加以下代码： 123//后面拷贝的路径为第2步拷贝的src后面的代码background_music://music.163.com/outchain/playertype=0&amp;id=2992021935&amp;auto=1&amp;height=90 4.最终效果 绑定域名1.购买域名。 2.进入域名解析列表并对购买的域名进行解析 其中，着两条记录要自己添加 win+R快捷键打开“运行”窗口，输入cmd运行命令行控制台输入命令：ping yourusername.github.io 拿到你的github的ip地址 添加详细细节： 3.在你的博客的主目录下的public文件夹下建一个名称为CNAME的文件，记住，不要后缀名，在文件里面填写你的博客的地址， yourusername.github.io 添加评论系统此处介绍的评论系统是Valine ，Valine 是基于 LeanCloud 作为数据存储的，所以需要注册一个账号。注册完成后，进入控制台： ​ 1.创建一个引用，输入应用名称，选择开发版，点击创建 ​ 2.创建完成后，打开应用，左边的存储，查看 数据下面有没有 Counter 和 Comment 两个 Classes，如果没有，点击创建 Class，选择 无限制即可。创建完成后，如下： 3.配置Hexo中NexT主题 路径： themes/next/_config.yml 文件。到这里 https://www.jsdelivr.com/package/npm/valine 这个地址选择最新版本的Valine，然后获取cdn地址，修改到 主题配置文件 _config.yml 即可。 主题配置文件配置参数如下： 最终效果哈哈，请参考：]]></content>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
  <entry>
    <title><![CDATA['初学者：hexo博客入门']]></title>
    <url>%2F2019%2F09%2F17%2F%E5%88%9D%E5%AD%A6%E8%80%85%EF%BC%9A%E5%8D%9A%E5%AE%A2%E5%85%A5%E9%97%A8%2F</url>
    <content type="text"><![CDATA[前言听B站大神推荐，作为程序员，必须拥有属于自己的博客，我也觉得很有必要，所以在网上学查了一些资料，自己搭了一个自己的博客，感觉博客还挺有趣的，不断能够锻炼自己的写作能力，而且也能分享自己踩过的一些坑，记录自己的生活，记录自己对某些技术的一些理解，希望自己能够一直坚持下来，加油！ 技术点介绍Hexo框架+Markdown标记语言。Hexo是一个快速，简洁并且高效的博客框架，Hexo使用Markdown（或者其他渲染引擎）解析文章，在几秒内，即可利用靓丽的主题生成静态的网页。 安装安装Hexo框架之前，我们需要安装Node.js(版本不低于8.6)和Git，我们可以在Node.js的官网下载安装Node.js，在Git的官网下载安装git ，安装好git和Node.js 后，我们可以检查是否安装好了git和Node.js 12345//Windows+R 输入cmd 打开命令行//查看node 的版本输入： node -v//查看 git 的本版输入： git --version 效果如下： 12345678910//安装hexo框架 很简单 一步搞定npm install -g hexo-cli //安装hexo博客框架， -g表示全局安装mkdir myblog // 新建一个myblog文件夹 名字随便取cd myblog // 进入到myblog文件夹hexo init //初始化一篇博客hexo new '新建的博客名' // 新建一个博客hexo s // 启动博客hexo d // 部署博客hexo clean // 清除缓存hexo g //重新生成静态文件 这里只是介绍简单的hexo命令，更详细的的教程我们可以查看hexo的官网文档,安装好后我们可以新建一篇博客，然后用 heox s 命令启动博客， 后期我们想要给自己的博客换主题的话，我们可以参这篇博客，hexo+NexT主题，如何搭建一个炫酷的博客. 踩过的坑站点的配置文件 _config.yml ,这是我遇到了一个坑。 心得体会第一次写博客，写的很垃圾，写的东西很浅显，希望日后不断的学习，不断的努力，争取写出很好的博客，更有水平的博客，加油。]]></content>
      <tags>
        <tag>hexo博客</tag>
      </tags>
  </entry>
</search>
